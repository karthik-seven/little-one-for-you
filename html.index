<!-- Background Layers -->
<div class="aurora"></div>
<canvas id="bg-hearts"></canvas>

<!-- Progress Bar -->
<div class="fixed top-5 left-1/2 -translate-x-1/2 w-1/2 max-w-sm h-2 rounded-full glassmorphism-card overflow-hidden">
    <div id="progress-bar-fill" class="h-full bg-gradient-to-r from-pink-500 to-red-500 transition-all duration-500" style="width: 20%;"></div>
</div>

<!-- Main Content -->
<main class="relative w-full h-screen flex items-center justify-center p-4">

    <!-- Step 1: Welcome -->
    <section id="step-1" class="step-card w-full max-w-md text-center p-8 rounded-2xl glassmorphism-card">
        <div class="text-6xl mb-4 animate-pulse">‚ù§Ô∏è</div>
        <h1 class="font-playfair text-gradient text-4xl mb-4">Hey Beautiful,</h1>
        <p class="mb-8">I built a little world for you, just to bring a smile to your face on your special day.</p>
        <button class="btn-primary text-white font-bold py-3 px-8 rounded-full">Let's Begin</button>
    </section>

    <!-- Step 2: Core Message -->
    <section id="step-2" class="step-card w-full max-w-md text-center p-8 rounded-2xl glassmorphism-card hidden">
        <div class="text-6xl mb-4">üéâ</div>
        <h1 class="font-playfair text-gradient text-5xl mb-4">Happy Birthday!</h1>
        <p class="mb-8">Another year of you making the world brighter. Your existence is a gift, and I'm so lucky to witness it.</p>
        <button class="btn-primary text-white font-bold py-3 px-8 rounded-full">There's more...</button>
    </section>
    
    <!-- Step 3: Reasons Why -->
    <section id="step-3" class="step-card w-full max-w-2xl text-center p-8 rounded-2xl glassmorphism-card hidden">
        <h1 class="font-playfair text-gradient text-4xl mb-8">A Few Things I Adore About You</h1>
        <div class="grid grid-cols-2 gap-4 mb-8 text-left">
            <div class="col-span-2 p-4 rounded-lg bg-white/5">
                <h2 class="font-bold text-lg mb-2">‚ú® Your Unmatched Kindness</h2>
                <p class="text-sm">The genuine warmth you show to everyone is something truly rare and beautiful.</p>
            </div>
            <div class="p-4 rounded-lg bg-white/5">
                <h2 class="font-bold text-lg mb-2">üòä That Smile</h2>
                <p class="text-sm">It's a work of art.</p>
            </div>
             <div class="col-span-2 p-4 rounded-lg bg-white/5">
                 <h2 class="font-bold text-lg mb-2">üåü Your Radiant Spirit</h2>
                <p class="text-sm">Your passion for life is infectious. Being around you makes everything feel more exciting and possible.</p>
            </div>
        </div>
        <button class="btn-primary text-white font-bold py-3 px-8 rounded-full">Remember this?</button>
    </section>

    <!-- Step 4: Shared Memory -->
    <section id="step-4" class="step-card w-full max-w-md text-center p-8 rounded-2xl glassmorphism-card hidden">
        <h1 class="font-playfair text-gradient text-4xl mb-8">That One Time...</h1>
        <div class="relative mb-8 perspective-1000">
            <div class="polaroid transform-style-3d transition-transform duration-500" style="transform: rotateZ(-5deg) rotateX(10deg);">
                <img src="https://i.ibb.co/6Z6XgCg/crush.webp" alt="Shared Memory" class="w-full h-auto rounded-t-lg">
                <div class="bg-white text-gray-800 p-4 rounded-b-lg">Our favorite memory.</div>
            </div>
        </div>
        <p class="mb-8">Every moment with you feels like a scene from a movie I'd watch on repeat.</p>
        <button class="btn-primary text-white font-bold py-3 px-8 rounded-full">One last thing...</button>
    </section>

    <!-- Step 5: Finale -->
    <section id="step-5" class="step-card w-full max-w-md text-center p-8 rounded-2xl glassmorphism-card hidden">
         <div class="text-6xl mb-4">üéÇ</div>
        <h1 class="font-playfair text-gradient text-4xl mb-4">My Wish For You</h1>
        <p class="mb-8">May the next year bring you all the love, success, and pure happiness you so rightfully deserve. May your dreams soar higher than ever.</p>
         <div class="h-12">
            <p id="final-message" class="text-2xl font-bold opacity-0">Happy Birthday, my crush! ‚ù§Ô∏è</p>
        </div>
        <button id="celebrate-btn" class="btn-primary text-white font-bold py-3 px-8 rounded-full">Celebrate!</button>
    </section>

</main>


<script>
    // --- THREE.JS HEARTS --- //
    let scene, camera, renderer, hearts = [];
    
    function initThree() {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('bg-hearts'), alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);

        camera.position.z = 50;

        const heartShape = new THREE.Shape();
        heartShape.moveTo(25, 25);
        heartShape.bezierCurveTo(25, 25, 20, 0, 0, 0);
        heartShape.bezierCurveTo(-30, 0, -30, 35, -30, 35);
        heartShape.bezierCurveTo(-30, 55, -10, 77, 25, 95);
        heartShape.bezierCurveTo(60, 77, 80, 55, 80, 35);
        heartShape.bezierCurveTo(80, 35, 80, 0, 50, 0);
        heartShape.bezierCurveTo(35, 0, 25, 25, 25, 25);
        
        const extrudeSettings = { depth: 8, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 };
        const geometry = new THREE.ExtrudeGeometry(heartShape, extrudeSettings);
        
        for (let i = 0; i < 25; i++) {
            const material = new THREE.MeshStandardMaterial({ color: 0xff4f8f, metalness: 0.5, roughness: 0.5 });
            const heart = new THREE.Mesh(geometry, material);
            
            heart.position.set(
                (Math.random() - 0.5) * 100,
                (Math.random() - 0.5) * 100,
                (Math.random() - 0.5) * 50
            );
            
            heart.scale.set(0.05, 0.05, 0.05);
            heart.rotation.set(Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI);
            
            heart.userData.baseY = heart.position.y;
            heart.userData.driftSpeed = Math.random() * 0.02 + 0.01;
            heart.userData.rotationSpeed = { x: Math.random() * 0.01, y: Math.random() * 0.01, z: Math.random() * 0.01 };
            
            hearts.push(heart);
            scene.add(heart);
        }
        
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
        directionalLight.position.set(5, 5, 5);
        scene.add(directionalLight);
    }

    let animateHearts = true;
    function animate() {
        if (animateHearts) {
            requestAnimationFrame(animate);

            hearts.forEach(heart => {
                heart.rotation.x += heart.userData.rotationSpeed.x;
                heart.rotation.y += heart.userData.rotationSpeed.y;
                heart.rotation.z += heart.userData.rotationSpeed.z;
                heart.position.y = heart.userData.baseY + Math.sin(Date.now() * 0.001 + heart.position.x) * 5;
            });

            renderer.render(scene, camera);
        }
    }
    
    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    });

    initThree();
    animate();


    // --- GSAP & Navigation --- //
    const steps = document.querySelectorAll('.step-card');
    const progressBar = document.getElementById('progress-bar-fill');
    let currentStep = 0;

    function goToStep(stepIndex) {
        if (stepIndex < 0 || stepIndex >= steps.length) return;

        const currentCard = steps[currentStep];
        const nextCard = steps[stepIndex];

        const tl = gsap.timeline();
        tl.to(currentCard, {
            opacity: 0,
            scale: 0.9,
            duration: 0.5,
            ease: 'power2.inOut',
            onComplete: () => currentCard.classList.add('hidden')
        });

        tl.fromTo(nextCard, {
            opacity: 0,
            scale: 1.1,
            onStart: () => nextCard.classList.remove('hidden')
        }, {
            opacity: 1,
            scale: 1,
            duration: 0.5,
            ease: 'power2.inOut'
        });

        currentStep = stepIndex;
        
        const progress = ((currentStep + 1) / steps.length) * 100;
        gsap.to(progressBar, { width: `${progress}%`, duration: 0.5, ease: 'power2.inOut' });
    }

    document.querySelectorAll('button').forEach((button, index) => {
        if (index < steps.length - 1) { // All buttons except the last one
            button.addEventListener('click', () => {
                goToStep(currentStep + 1);
            });
        }
    });

    // --- Polaroid Effect --- //
    const polaroid = document.querySelector('.polaroid');
    const container = polaroid.parentElement;
    
    container.addEventListener('mousemove', (e) => {
        const rect = container.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        const rotateX = ((y - centerY) / centerY) * -10;
        const rotateY = ((x - centerX) / centerX) * 10;
        
        gsap.to(polaroid, {
            rotationX: rotateX,
            rotationY: rotateY,
            rotationZ: -5,
            duration: 0.5,
            ease: 'power2.out'
        });
    });
    
    container.addEventListener('mouseleave', () => {
        gsap.to(polaroid, {
            rotationX: 10,
            rotationY: 0,
            rotationZ: -5,
            duration: 0.5,
            ease: 'power2.out'
        });
    });
    
    // --- Grand Finale --- //
    const celebrateBtn = document.getElementById('celebrate-btn');
    celebrateBtn.addEventListener('click', () => {
        const tl = gsap.timeline();

        tl.to(celebrateBtn, { opacity: 0, y: 10, duration: 0.5, ease: 'power2.in' })
          .to(celebrateBtn, { display: 'none' });

        tl.to('#final-message', { opacity: 1, y: -10, duration: 1, ease: 'elastic.out(1, 0.5)' }, "-=0.2");
        
        // Confetti
        const duration = 5 * 1000;
        const animationEnd = Date.now() + duration;
        const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

        function randomInRange(min, max) {
          return Math.random() * (max - min) + min;
        }

        const interval = setInterval(function() {
          const timeLeft = animationEnd - Date.now();

          if (timeLeft <= 0) {
            return clearInterval(interval);
          }

          const particleCount = 50 * (timeLeft / duration);
          confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } });
          confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } });
        }, 250);
        
        // Emoji confetti
        setTimeout(() => {
            const defaults = {
              spread: 360,
              ticks: 100,
              gravity: 0,
              decay: 0.94,
              startVelocity: 30,
              shapes: ['heart'],
              colors: ['#FFC0CB', '#FF69B4', '#FF1493', '#C71585']
            };
        
            function shoot() {
              confetti({
                ...defaults,
                particleCount: 50,
                scalar: 2
              });
        
              confetti({
                ...defaults,
                particleCount: 25,
                scalar: 3
              });
        
              confetti({
                ...defaults,
                particleCount: 10,
                scalar: 4
              });
            }
        
            setTimeout(shoot, 0);
            setTimeout(shoot, 100);
            setTimeout(shoot, 200);
        }, 500);


        // Animate 3D hearts out
        animateHearts = false; // Stop the regular animation loop
        
        hearts.forEach((heart, i) => {
            const delay = i * 0.05;
            gsap.to(heart.position, {
                x: heart.position.x * 2,
                y: 100 + Math.random() * 20,
                z: heart.position.z * 2,
                duration: 3,
                ease: 'power2.inOut',
                delay: delay
            });
            
            gsap.to(heart.rotation, {
                x: Math.random() * 10,
                y: Math.random() * 10,
                duration: 3,
                ease: 'power2.inOut',
                delay: delay
            });
            
            gsap.to(heart.material, {
                opacity: 0,
                duration: 1,
                delay: delay + 2,
                onComplete: () => scene.remove(heart)
            });
        });
        
        function finalRender() {
            if (hearts.some(h => h.parent === scene)) {
                renderer.render(scene, camera);
                requestAnimationFrame(finalRender);
            }
        }
        finalRender();
    });

</script>
