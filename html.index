<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Happy Birthday!</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script async src="https://ga.jspm.io/npm:es-module-shims@1.7.0/dist/es-module-shims.js"></script>
    <script type="importmap">
    {
        "imports": {
            "three": "https://unpkg.com/three@0.157.0/build/three.module.js",
            "three/addons/": "https://unpkg.com/three@0.157.0/examples/jsm/"
        }
    }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <link href="https://api.fontshare.com/v2/css?f[]=satoshi@700,500,400&display=swap" rel="stylesheet">

    <style>
        body {
            background-color: #0c0a09;
            font-family: 'Satoshi', sans-serif;
            overflow: hidden;
        }

        .aurora-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background-color: #0c0a09;
            --aurora-color-1: hsla(333, 70%, 55%, 0.4);
            --aurora-color-2: hsla(282, 82%, 54%, 0.3);
            --aurora-color-3: hsla(210, 89%, 60%, 0.3);
            --aurora-color-4: hsla(35, 90%, 60%, 0.3);
            animation: aurora 20s infinite linear;
        }

        @keyframes aurora {
            0% {
                background:
                    radial-gradient(ellipse at 20% 80%, var(--aurora-color-1), transparent 50%),
                    radial-gradient(ellipse at 80% 30%, var(--aurora-color-2), transparent 50%),
                    radial-gradient(ellipse at 60% 90%, var(--aurora-color-3), transparent 50%),
                    radial-gradient(ellipse at 30% 20%, var(--aurora-color-4), transparent 50%);
            }
            50% {
                background:
                    radial-gradient(ellipse at 80% 20%, var(--aurora-color-1), transparent 50%),
                    radial-gradient(ellipse at 20% 70%, var(--aurora-color-2), transparent 50%),
                    radial-gradient(ellipse at 90% 80%, var(--aurora-color-3), transparent 50%),
                    radial-gradient(ellipse at 40% 40%, var(--aurora-color-4), transparent 50%);
            }
            100% {
                background:
                    radial-gradient(ellipse at 20% 80%, var(--aurora-color-1), transparent 50%),
                    radial-gradient(ellipse at 80% 30%, var(--aurora-color-2), transparent 50%),
                    radial-gradient(ellipse at 60% 90%, var(--aurora-color-3), transparent 50%),
                    radial-gradient(ellipse at 30% 20%, var(--aurora-color-4), transparent 50%);
            }
        }
        
        #three-canvas {
            position: fixed;
            top: 0;
            left: 0;
            z-index: -1;
        }

        .glass-card {
            background: rgba(12, 10, 9, 0.6);
            backdrop-filter: blur(24px);
            -webkit-backdrop-filter: blur(24px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
        }

        .gradient-text {
            font-family: 'Playfair Display', serif;
            background: linear-gradient(to right, #f8c9d3, #fff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .glow-button {
            background: linear-gradient(90deg, #FF6B6B, #FF8E53);
            box-shadow: 0 0 15px 5px rgba(255, 107, 107, 0.3);
            transition: all 0.3s ease;
        }

        .glow-button:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 0 25px 8px rgba(255, 107, 107, 0.5);
        }
        
        .glow-button:active {
            transform: translateY(-1px) scale(1.02);
            box-shadow: 0 0 15px 5px rgba(255, 107, 107, 0.4);
        }

        .progress-track {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .progress-bar-fill {
            background: linear-gradient(90deg, #FF6B6B, #FF8E53);
        }

        .heart-icon {
            animation: beat 1.5s infinite ease-in-out;
        }
        
        @keyframes beat {
            0%, 100% { transform: scale(1); text-shadow: 0 0 10px #ff6b6b; }
            50% { transform: scale(1.1); text-shadow: 0 0 25px #ff6b6b; }
        }
        
        .bento-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }
        
        .bento-item {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 1rem;
            padding: 1.5rem;
        }

        .col-span-2 {
            grid-column: span 2 / span 2;
        }
        
        .polaroid {
            transform-style: preserve-3d;
            transition: transform 0.4s ease;
        }
    </style>
</head>
<body class="text-gray-200">

    <div class="aurora-background"></div>
    <canvas id="three-canvas"></canvas>

    <!-- Audio Elements -->
    <audio id="background-music" loop>
        <source src="https://www.chosic.com/wp-content/uploads/2021/04/purrple-cat-wildflowers.mp3" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
    <audio id="click-sound">
        <source src="https://cdn.pixabay.com/download/audio/2021/08/04/audio_9c32e642d9.mp3" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>

    <div class="fixed top-4 left-1/2 -translate-x-1/2 w-1/3 max-w-sm h-2 rounded-full progress-track">
        <div id="progressBar" class="h-full rounded-full progress-bar-fill" style="width: 0%;"></div>
    </div>
    
    <main class="relative w-full h-screen flex items-center justify-center">
        <!-- Step 1: Welcome -->
        <div id="step-1" class="step text-center p-8 rounded-2xl glass-card w-11/12 max-w-lg">
            <div class="text-6xl mb-4 heart-icon">‚ù§Ô∏è</div>
            <h1 class="text-4xl md:text-5xl font-bold mb-4 gradient-text">Hey Beautiful,</h1>
            <p class="text-lg md:text-xl mb-8">I built a little world for you, just to bring a smile to your face on your special day.</p>
            <button class="next-btn glow-button text-white font-bold py-3 px-8 rounded-full">Let's Begin</button>
        </div>

        <!-- Step 2: Core Message -->
        <div id="step-2" class="step absolute text-center p-8 rounded-2xl glass-card w-11/12 max-w-lg hidden">
             <div class="text-6xl mb-4">üéâ</div>
             <h1 class="text-4xl md:text-5xl font-bold mb-4 gradient-text">Happy Birthday!</h1>
             <p class="text-lg md:text-xl mb-8">Another year of you making the world brighter. Your existence is a gift, and I'm so lucky to witness it.</p>
             <button class="next-btn glow-button text-white font-bold py-3 px-8 rounded-full">There's more...</button>
        </div>

        <!-- Step 3: Reasons Why -->
        <div id="step-3" class="step absolute p-8 rounded-2xl glass-card w-11/12 max-w-2xl hidden">
             <h1 class="text-3xl md:text-4xl text-center font-bold mb-6 gradient-text">A Few Things I Adore About You</h1>
             <div class="bento-grid">
                <div class="bento-item col-span-2">
                    <h2 class="text-xl font-bold mb-2">‚ú® Your Unmatched Kindness</h2>
                    <p>The genuine warmth you show to everyone is something truly rare and beautiful.</p>
                </div>
                <div class="bento-item">
                    <h2 class="text-xl font-bold mb-2">üòä That Smile</h2>
                    <p>It's a work of art.</p>
                </div>
                 <div class="bento-item col-span-2 md:col-span-1">
                    <h2 class="text-xl font-bold mb-2">üåü Your Radiant Spirit</h2>
                    <p>Your passion for life is infectious. Being around you makes everything feel more exciting and possible.</p>
                </div>
             </div>
             <div class="text-center mt-8">
                <button class="next-btn glow-button text-white font-bold py-3 px-8 rounded-full">Remember this?</button>
             </div>
        </div>

        <!-- Step 4: Shared Memory -->
        <div id="step-4" class="step absolute text-center p-8 rounded-2xl glass-card w-11/12 max-w-lg hidden">
            <h1 class="text-4xl md:text-5xl font-bold mb-6 gradient-text">That One Time...</h1>
            <div class="flex justify-center mb-6">
                <div id="polaroid" class="polaroid bg-white p-4 pb-16 rounded-sm shadow-lg" style="transform: rotateZ(-5deg);">
                    <img src="https://i.ibb.co/6Z6XgCg/crush.webp" alt="A shared memory" class="w-full h-auto">
                    <p class="absolute bottom-4 left-0 right-0 text-gray-800 text-lg" style="font-family: 'Playfair Display', serif;">Our favorite memory.</p>
                </div>
            </div>
            <p class="text-lg md:text-xl mb-8">Every moment with you feels like a scene from a movie I'd watch on repeat.</p>
            <button class="next-btn glow-button text-white font-bold py-3 px-8 rounded-full">One last thing...</button>
        </div>

        <!-- Step 5: Finale -->
        <div id="step-5" class="step absolute text-center p-8 rounded-2xl glass-card w-11/12 max-w-lg hidden">
            <div class="text-6xl mb-4">üéÇ</div>
            <h1 class="text-4xl md:text-5xl font-bold mb-4 gradient-text">My Wish For You</h1>
            <p class="text-lg md:text-xl mb-8">May the next year bring you all the love, success, and pure happiness you so rightfully deserve. May your dreams soar higher than ever.</p>
            <div id="final-message-container" class="h-12">
                 <p id="final-message" class="text-2xl font-bold text-pink-300 opacity-0"></p>
            </div>
            <button id="celebrate-btn" class="glow-button text-white font-bold py-3 px-8 rounded-full">Celebrate!</button>
        </div>
    </main>

    <script type="module">
        import * as THREE from 'three';

        let scene, camera, renderer, hearts;
        const totalSteps = 5;
        
        // --- AUDIO ---
        const bgMusic = document.getElementById('background-music');
        const clickSound = document.getElementById('click-sound');
        bgMusic.volume = 0.3; // Set a pleasant background volume

        let hasInteracted = false;
        document.body.addEventListener('click', () => {
            if (!hasInteracted) {
                bgMusic.play().catch(e => console.error("Autoplay was blocked:", e));
                hasInteracted = true;
            }
        }, { once: true });

        function playClickSound() {
            clickSound.currentTime = 0;
            clickSound.play();
        }

        function initThree() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('three-canvas'), alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);

            hearts = [];
            const heartShape = new THREE.Shape();
            heartShape.moveTo(25, 25);
            heartShape.bezierCurveTo(25, 25, 20, 0, 0, 0);
            heartShape.bezierCurveTo(-30, 0, -30, 35, -30, 35);
            heartShape.bezierCurveTo(-30, 55, -10, 77, 25, 95);
            heartShape.bezierCurveTo(60, 77, 80, 55, 80, 35);
            heartShape.bezierCurveTo(80, 35, 80, 0, 50, 0);
            heartShape.bezierCurveTo(35, 0, 25, 25, 25, 25);
            const extrudeSettings = { depth: 8, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 };
            const geometry = new THREE.ExtrudeGeometry(heartShape, extrudeSettings).scale(0.03, 0.03, 0.03);

            for (let i = 0; i < 25; i++) {
                const material = new THREE.MeshStandardMaterial({ color: new THREE.Color(`hsl(${330 + Math.random() * 30}, 100%, 75%)`), roughness: 0.5, metalness: 0.1 });
                const heart = new THREE.Mesh(geometry, material);
                heart.position.set((Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20);
                heart.rotation.set(Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI);
                heart.userData.baseY = heart.position.y;
                heart.userData.phase = Math.random() * Math.PI * 2;
                scene.add(heart);
                hearts.push(heart);
            }

            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 10, 7);
            scene.add(directionalLight);

            camera.position.z = 10;

            animate();
        }

        function animate() {
            requestAnimationFrame(animate);
            const time = Date.now() * 0.0005;
            hearts.forEach(heart => {
                heart.rotation.y += 0.005;
                heart.position.y = heart.userData.baseY + Math.sin(time + heart.userData.phase) * 0.5;
            });
            renderer.render(scene, camera);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        window.addEventListener('resize', onWindowResize, false);

        // Step navigation
        let currentStep = 1;
        const progressBar = document.getElementById('progressBar');
        const nextButtons = document.querySelectorAll('.next-btn');

        nextButtons.forEach(button => {
            button.addEventListener('click', () => {
                playClickSound();
                const nextStep = currentStep + 1;
                if (nextStep <= totalSteps) {
                    transitionToStep(nextStep);
                }
            });
        });

        function transitionToStep(step) {
            const currentEl = document.getElementById(`step-${currentStep}`);
            const nextEl = document.getElementById(`step-${step}`);
            
            const tl = gsap.timeline();
            tl.to(currentEl, { opacity: 0, scale: 0.9, duration: 0.5, ease: 'power2.in' })
              .set(currentEl, { display: 'none' })
              .set(nextEl, { display: 'block', opacity: 0, scale: 0.9 })
              .to(nextEl, { opacity: 1, scale: 1, duration: 0.5, ease: 'power2.out' });
            
            gsap.from(nextEl.children, {
                opacity: 0,
                y: 30,
                stagger: 0.2,
                delay: 0.5,
                duration: 0.5
            });

            currentStep = step;
            updateProgressBar();
        }

        function updateProgressBar() {
            const progress = ((currentStep - 1) / (totalSteps -1)) * 100;
            gsap.to(progressBar, { width: `${progress}%`, duration: 0.5, ease: 'power2.out' });
        }
        
        // Polaroid Interaction
        const polaroid = document.getElementById('polaroid');
        document.getElementById('step-4').addEventListener('mousemove', (e) => {
            const rect = polaroid.getBoundingClientRect();
            const x = e.clientX - rect.left - rect.width / 2;
            const y = e.clientY - rect.top - rect.height / 2;
            
            const rotateX = -y / 20;
            const rotateY = x / 20;
            
            gsap.to(polaroid, {
                rotationX: rotateX,
                rotationY: rotateY,
                rotationZ: -5,
                transformPerspective: 1000,
                ease: 'power1.out'
            });
        });
        
         document.getElementById('step-4').addEventListener('mouseleave', () => {
            gsap.to(polaroid, {
                rotationX: 0,
                rotationY: 0,
                rotationZ: -5,
                duration: 0.5,
                ease: 'elastic.out(1, 0.5)'
            });
        });

        // Grand Finale
        const celebrateBtn = document.getElementById('celebrate-btn');
        celebrateBtn.addEventListener('click', () => {
            playClickSound();
            gsap.to(celebrateBtn, { opacity: 0, y: -20, duration: 0.5, onComplete: () => celebrateBtn.style.display = 'none' });

            const finalMessage = document.getElementById('final-message');
            finalMessage.textContent = "Happy Birthday, my crush! ‚ù§Ô∏è";
            gsap.to(finalMessage, { opacity: 1, y: -20, duration: 1, ease: 'power2.out', delay: 0.3 });

            // Confetti
            const duration = 5 * 1000;
            const animationEnd = Date.now() + duration;
            const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

            function randomInRange(min, max) {
              return Math.random() * (max - min) + min;
            }

            const interval = setInterval(function() {
              const timeLeft = animationEnd - Date.now();
              if (timeLeft <= 0) return clearInterval(interval);
              
              const particleCount = 50 * (timeLeft / duration);
              confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } });
              confetti({ ...defaults, particleCount, origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } });
            }, 250);

             setTimeout(() => {
                const interval2 = setInterval(function() {
                    const timeLeft = animationEnd - Date.now();
                    if (timeLeft <= 0) return clearInterval(interval2);

                    confetti({
                        particleCount: 2,
                        angle: 60,
                        spread: 55,
                        origin: { x: 0 },
                        colors: ['#ff6b6b', '#f06595', '#f9a8d4', '#fde2e4', '#ffffff']
                    });
                    confetti({
                        particleCount: 2,
                        angle: 120,
                        spread: 55,
                        origin: { x: 1 },
                        colors: ['#ff6b6b', '#f06595', '#f9a8d4', '#fde2e4', '#ffffff']
                    });
                }, 150);
            }, 500);


            // Hearts finale
            hearts.forEach(heart => {
                gsap.to(heart.position, {
                    x: heart.position.x * 3,
                    y: 15 + Math.random() * 5,
                    z: heart.position.z * 3,
                    duration: 4,
                    ease: 'power2.out'
                });
                gsap.to(heart.rotation, {
                    x: Math.random() * Math.PI * 4,
                    y: Math.random() * Math.PI * 4,
                    duration: 4,
                    ease: 'power2.out'
                });
                gsap.to(heart.material, {
                    opacity: 0,
                    duration: 2,
                    delay: 2
                });
            });
        });
        
        // Initial setup
        updateProgressBar();
        gsap.from("#step-1 > *", { opacity: 0, y: 30, stagger: 0.2, delay: 0.5, duration: 1 });
        initThree();
    </script>
</body>
</html>
